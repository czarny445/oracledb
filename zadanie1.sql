-- £ukasz Wieczorek 206833
-- Konrad Turek 206830

DROP
  TABLE KLIENT CASCADE CONSTRAINTS;
DROP
  TABLE PRODUKT CASCADE CONSTRAINTS;
DROP
  TABLE ZAMOWIENIE CASCADE CONSTRAINTS;
DROP
  TABLE LINIA_ZAMOWIENIA CASCADE CONSTRAINTS;
DROP
  TABLE ADRES CASCADE CONSTRAINTS;
  
  
CREATE
  TABLE KLIENT
  (
    PK          NUMBER NOT NULL ENABLE,
    IMIE        VARCHAR2(20 BYTE),
    DRUGIE_IMIE VARCHAR2(20 BYTE),
    NAZWISKO    VARCHAR2(40 BYTE),
    CONSTRAINT KLIENT_PK PRIMARY KEY (PK) ENABLE
  );
CREATE
  TABLE PRODUKT
  (
    PK          NUMBER NOT NULL ,
    NAZWA       VARCHAR2(50) NOT NULL ,
    OPIS        VARCHAR2(500) ,
    CENA        NUMBER DEFAULT 0 NOT NULL ,
    ILOSC_SZTUK NUMBER DEFAULT 0 NOT NULL ,
    CONSTRAINT PRODUKT_PK PRIMARY KEY (PK) ENABLE
  );
CREATE
  TABLE ADRES
  (
    PK            NUMBER NOT NULL ,
    NR_MIESZKANIA VARCHAR2(10) ,
    ULICA         VARCHAR2(50) ,
    MIEJSCOWOSC   VARCHAR2(50) ,
    KOD_POCZTOWY  VARCHAR2(5) ,
    NR_DOMU       VARCHAR2(10) ,
    POCZTA        VARCHAR2(50) ,
    CONSTRAINT ADRES_PK PRIMARY KEY ( PK ) ENABLE
  );
CREATE
  TABLE ZAMOWIENIE
  (
    PK     NUMBER NOT NULL ,
    KLIENT NUMBER NOT NULL ,
    ADRES  NUMBER NOT NULL ,
    CONSTRAINT ZAMOWIENIE_PK PRIMARY KEY ( PK ) ENABLE,
    CONSTRAINT ZAMOWIENIE_KLIENT_FK FOREIGN KEY (KLIENT) REFERENCES KLIENT (PK)
    ENABLE,
    CONSTRAINT ZAMOWIENIE_ADRES_FK FOREIGN KEY (ADRES) REFERENCES ADRES (PK)
    ENABLE
  );
CREATE
  TABLE LINIA_ZAMOWIENIA
  (
    PK         NUMBER NOT NULL,
    PRODUKT    NUMBER NOT NULL,
    ILOSC      NUMBER NOT NULL,
    ZAMOWIENIE NUMBER NOT NULL,
    CONSTRAINT LINIA_ZAMOWIENIA_PK PRIMARY KEY (PK) ENABLE,
    CONSTRAINT LINIA_ZAMOWIENIA_PRODUKT_FK FOREIGN KEY (PRODUKT) REFERENCES
    PRODUKT (PK) ENABLE,
    CONSTRAINT LINIA_ZAMOWIENIA_ZAMOWIENIE_FK FOREIGN KEY (ZAMOWIENIE)
    REFERENCES ZAMOWIENIE (PK) ENABLE
  );
  
INSERT INTO "TEST"."ADRES" (PK, NR_MIESZKANIA, ULICA, MIEJSCOWOSC, KOD_POCZTOWY, NR_DOMU, POCZTA) VALUES ('1', '15', 'TESTOWA', 'TEST', '95040', '2', 'TEST');
INSERT INTO "TEST"."ADRES" (PK, NR_MIESZKANIA, ULICA, MIEJSCOWOSC, KOD_POCZTOWY, NR_DOMU, POCZTA) VALUES ('2', '45', 'TEST', 'TEST', '95234', '65', 'TESTOWA');
INSERT INTO "TEST"."ADRES" (PK, NR_MIESZKANIA, ULICA, MIEJSCOWOSC, KOD_POCZTOWY, NR_DOMU, POCZTA) VALUES ('3', '112', 'TEST', 'TEST', '92124', '23', 'TEST');
INSERT INTO "TEST"."ADRES" (PK, NR_MIESZKANIA, ULICA, MIEJSCOWOSC, KOD_POCZTOWY, NR_DOMU, POCZTA) VALUES ('4', '312', 'TEST', 'TEST', '95040', '112', 'TEST');

INSERT INTO "TEST"."KLIENT" (PK, IMIE, DRUGIE_IMIE, NAZWISKO) VALUES ('1', 'John', 'Gi', 'Doe');
INSERT INTO "TEST"."KLIENT" (PK, IMIE, NAZWISKO) VALUES ('2', 'Jacek', 'Placek');
INSERT INTO "TEST"."KLIENT" (PK, IMIE, NAZWISKO) VALUES ('3', 'Krzysztof', 'Testowy');

INSERT INTO "TEST"."PRODUKT" (PK, NAZWA, OPIS, CENA, ILOSC_SZTUK) VALUES ('1', 'Ciastko', 'Testowy opis ciastka', '1,2', '12');
INSERT INTO "TEST"."PRODUKT" (PK, NAZWA, OPIS, CENA, ILOSC_SZTUK) VALUES ('2', 'Czekolada', 'Testowy opis czekolady', '5,95', '23');
INSERT INTO "TEST"."PRODUKT" (PK, NAZWA, OPIS, CENA, ILOSC_SZTUK) VALUES ('3', 'Kasztan', 'Testowy kasztan', '12', '23');

INSERT INTO "TEST"."ZAMOWIENIE" (PK, KLIENT, ADRES) VALUES ('1', '1', '2');
INSERT INTO "TEST"."ZAMOWIENIE" (PK, KLIENT, ADRES) VALUES ('2', '1', '3');

INSERT INTO "TEST"."LINIA_ZAMOWIENIA" (PK, PRODUKT, ILOSC, ZAMOWIENIE) VALUES ('1', '1', '12', '1');
INSERT INTO "TEST"."LINIA_ZAMOWIENIA" (PK, PRODUKT, ILOSC, ZAMOWIENIE) VALUES ('2', '2', '1', '1');
INSERT INTO "TEST"."LINIA_ZAMOWIENIA" (PK, PRODUKT, ILOSC, ZAMOWIENIE) VALUES ('3', '3', '3', '1');

INSERT INTO "TEST"."LINIA_ZAMOWIENIA" (PK, PRODUKT, ILOSC, ZAMOWIENIE) VALUES ('4', '1', '3', '2');
INSERT INTO "TEST"."LINIA_ZAMOWIENIA" (PK, PRODUKT, ILOSC, ZAMOWIENIE) VALUES ('5', '2', '6', '2');


-- Funkcja 1: Wyszukanie iloœci zamówieñ danego u¿ytkownika
CREATE OR REPLACE FUNCTION GET_KLIENT_ZAMOWIENIA_COUNT 
(
  KLIENT_ID IN NUMBER 
) RETURN NUMBER IS
   countZamowienie NUMBER;
BEGIN
  SELECT COUNT(*) INTO countZamowienie FROM ZAMOWIENIE WHERE KLIENT = KLIENT_ID;
  RETURN countZamowienie;
END GET_KLIENT_ZAMOWIENIA_COUNT;

-- Wywoanie funkcji 1
DECLARE
  KLIENT_ID NUMBER;
  v_Return NUMBER;
BEGIN
  KLIENT_ID := 1;

  v_Return := GET_KLIENT_ZAMOWIENIA_COUNT(
    KLIENT_ID => KLIENT_ID
  );
DBMS_OUTPUT.PUT_LINE('v_Return = ' || v_Return);
END;